import { Action, Ctx, On, Wizard, WizardStep } from 'nestjs-telegraf';
import { Actions } from 'src/bot/constant/action';
import { CreateUserDto } from 'src/dtos/create-user.dto';
import { UserService } from 'src/user/user.service';
import { Context, Markup } from 'telegraf';
import * as buttons from '../markup/buttons';

@Wizard('login')
class LoginScene {
  constructor(private userService: UserService) {}

  //   @Action(Actions.AGGRE_WITH_POLICY)
  //   async onPolicy(@Ctx() ctx: any) {
  //     console.log(1);
  //     await ctx.wizard.selectStep(6);
  //   }

  @WizardStep(1)
  async requestLastName(ctx: any) {
    ctx.replyWithHTML(
      '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é <b>–§–∞–º–∏–ª–∏—é</b>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤</b>',
      Markup.removeKeyboard(),
    );
    await ctx.wizard.next();
  }

  @WizardStep(2)
  async requestFirstName(ctx: any) {
    if (!ctx.message) await ctx.scene.reenter();
    if (ctx.message.text == Actions.BACK) await ctx.scene.reenter();
    ctx.wizard.state.last_name = ctx.message.text;
    ctx.wizard.state.nuckname = ctx.message.from?.username;

    ctx.replyWithHTML(
      '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë <b>–ò–º—è</b>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω</b>',
    );
    await ctx.wizard.next();
  }

  @WizardStep(3)
  async requestCity(ctx: any) {
    if (!ctx.message) await ctx.scene.reenter();
    if (ctx.message.text == Actions.BACK) await ctx.scene.reenter();
    ctx.wizard.state.first_name = ctx.message.text;

    ctx.replyWithHTML(
      '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤—ã\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞</b>',
    );
    await ctx.wizard.next();
  }

  @WizardStep(4)
  async requestPhone(ctx: any) {
    if (!ctx.message) await ctx.scene.reenter();
    if (ctx.message.text == Actions.BACK) await ctx.scene.reenter();
    ctx.wizard.state.city = ctx.message.text;

    ctx.replyWithHTML(
      `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.wizard.state.first_name}.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n<b>–í —Ñ–æ—Ä–º–∞—Ç–µ:</b> +71234567890`,
    );

    await ctx.wizard.next();
  }

  @WizardStep(5)
  async requestPolicy(ctx: any) {
    if (!ctx.message) await ctx.scene.reenter();
    if (ctx.message.text == Actions.BACK) await ctx.scene.reenter();

    ctx.wizard.state.checkNumber = ctx.message.text;

    ctx.wizard.state.phone =
      ctx.wizard.state.checkNumber.indexOf('+') == -1
        ? (ctx.wizard.state.phone = '+' + ctx.wizard.state.checkNumber)
        : (ctx.wizard.state.phone = ctx.wizard.state.checkNumber);

    const isPhoneValide = await this.userService.phoneSchema.isValid(
      ctx.wizard.state.phone,
    );

    if (!isPhoneValide) {
      ctx.replyWithHTML(
        '<b>Error</b>: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n<b>–ü—Ä–∏–º–µ—Ä:</b> +71234567890',
      );
      ctx.wizard.selectStep(4);
    } else {
      ctx.replyWithHTML(
        `–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n–°–°—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: https://soak-pods.ru/politika.pdf`,
        buttons.REQUEST_POLICY(),
      );
    }
  }

  @Action(Actions.AGGRE_WITH_POLICY)
  async saveUser1(ctx: any) {
    ctx.editMessageText(
      '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ',
    );

    const isPhoneValide = await this.userService.phoneSchema.isValid(
      ctx.wizard.state.phone,
    );
    if (isPhoneValide) {
      let phone = ctx.wizard.state.phone;
      phone = Number(phone.slice(1, 12));

      const user = await this.userService.findUser(phone);

      if (!user) {
        const newUser = {
          chatId: ctx.chat.id,
          username: ctx.wizard.state.username || 'blocked',
          first_name: ctx.wizard.state.first_name,
          last_name: ctx.wizard.state.last_name,
          phone: String(phone),
          city: ctx.wizard.state.city,
        } as CreateUserDto;

        await this.userService.saveUser(newUser);
        await ctx.replyWithHTML(
          '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ü–∞—Ñ—Ñ–∏</b>.\n–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—Éüòå\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç SOAK, –∞ —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
          buttons.MAIN_MENU(),
        );

        await ctx.scene.leave();
        return;
      }

      const isAdmin = await this.userService.findAdminByChatId(user);

      if (isAdmin) {
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω.\n–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç');
        await ctx.scene.leave();
        return;
      }

      await ctx.replyWithHTML(
        '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ü–∞—Ñ—Ñ–∏</b>.\n–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—Éüòå\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç SOAK, –∞ —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
        buttons.MAIN_MENU(),
      );

      return ctx.scene.leave();
    } else {
      ctx.replyWithHTML(
        '<b>Error</b>: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n<b>–ü—Ä–∏–º–µ—Ä:</b> +71234567890',
      );
    }
  }
}

export default LoginScene;
